import fs from 'fs';
import transmission from 'transmission';

import * as obfuscation from './obfuscation.js';
import * as validate from './validate.js';

export interface Configuration {
	// Path to the file all log messages generated by the service are written to.
	// Required: No
	// Default: "warehouse.log"
	logPath: string;
	// Port to listen on for HTTP connections from nginx.
	// Required: No
	// Default: 3000
	listenPort: number;
	// Hostname or address to bind for HTTP connections from nginx.
	// Required: No
	// Default: "localhost"
	listenHostname: string;
	// The HTTP Origin of all requests is compared to this hostname in order to block illicit ones.
	// Required: No
	// Default: "localhost"
	externalHostname: string;
	// Connection string used to access the MongoDB service.
	// Required: Yes
	mongoDbUri: string;
	// Duration of intervals between successive checks for new torrents across all sites, in seconds.
	// Required: No
	// Default: 180
	subscriptionInterval: number;
	// Options pertaining to free disk space checks.
	// Required: Yes
	// The size limit for torrents queued by users who lack the administrator privilege, in gigabytes.
	// Affects both subscriptions and manually queued releases.
	// Required: No
	// Default: 10
	torrentSizeLimit: number;
	freeDiskSpace: FreeDiskSpaceSettings;
	// The configuration of sites configured for use with the service.
	// You must set up at least one site to run the service.
	// Required: Yes
	sites: Site[];
	// Options pertaining to the Transmission torrent service.
	// Required: Yes
	transmission: transmission.TransmissionOptions;
}

export interface Site {
	// The name of the torrent site that is being configured.
	// Must corrrespond to the name property of one of the "TorrentSite" implementations.
	// Required: Yes
	name: string;
	// The username required to log into the site.
	// Required: Yes
	username: string;
	// The password required to log into the site.
	// Required: Yes
	password: string;
}

export interface FreeDiskSpaceSettings {
	// Duration of intervals between successive disk space checks, in seconds.
	// Required: No
	// Default: 60
	interval: number;
	// Path to use for free disk space checks.
	// It is recommended that you use the "completed" torrent download directory of the Transmission service.
	// Required: Yes
	path: string;
	// Minimum free disk space on the medium the free disk space check path resides on, in gigabytes
	// Once this threshold has been reached the service will remove old torrents until enough space is available again.
	// Required: No
	// Default: 10
	min: number;
}

const configurationPath = 'configuration.json';

export async function read(): Promise<Configuration> {
	const configurationJson = await fs.promises.readFile(configurationPath, 'utf8');
	const configuration = <Configuration>JSON.parse(configurationJson);
	validateConfiguration(configuration);
	setDefaultValues(configuration);
	return configuration;
}

export async function write(configuration: Configuration) {
	const configurationJson = JSON.stringify(configuration, null, 4);
	await fs.promises.writeFile(configurationPath, configurationJson);
}

export function obfuscate(configuration: Configuration) {
	if (configuration.mongoDbUri != null) {
		const pattern = /^mongodb:\/\/.+?:.+?@/;
		const match = pattern.test(configuration.mongoDbUri);
		if (match === true) {
			configuration.mongoDbUri = obfuscation.obfuscate(configuration.mongoDbUri);
		}
	}
	if (configuration.sites != null) {
		configuration.sites.forEach(site => {
			site.username = obfuscation.obfuscate(site.username);
			site.password = obfuscation.obfuscate(site.password);
		});
	}
	const transmission = configuration.transmission;
	if (transmission != null) {
		transmission.username = obfuscation.obfuscate(transmission.username);
		transmission.password = obfuscation.obfuscate(transmission.password);
	}
}

export function deobfuscate(configuration: Configuration) {
	configuration.mongoDbUri = obfuscation.deobfuscate(configuration.mongoDbUri);
	if (configuration.sites != null) {
		configuration.sites.forEach(site => {
			site.username = obfuscation.deobfuscate(site.username);
			site.password = obfuscation.deobfuscate(site.password);
		});
	}
}

function validateConfiguration(configuration: Configuration) {
	validate.string('logPath', configuration.logPath, true);
	validate.number('listenPort', configuration.listenPort);
	validate.string('listenHostname', configuration.listenHostname, true);
	validate.string('externalHostname', configuration.externalHostname, true);
	validate.string('mongoDbUri', configuration.mongoDbUri);
	validate.number('subscriptionInterval', configuration.subscriptionInterval, true);
	validate.number('torrentSizeLimit', configuration.torrentSizeLimit, true);
	const freeDiskSpace = configuration.freeDiskSpace;
	validate.object('freeDiskSpace', freeDiskSpace);
	validate.number('freeDiskSpace.interval', freeDiskSpace.interval, true);
	validate.string('freeDiskSpace.path', freeDiskSpace.path);
	validate.number('freeDiskSpace.min', freeDiskSpace.min, true);
	validate.array('sites', configuration.sites, false, false);
	configuration.sites.forEach(site => {
		validate.object('sites[i]', site);
		validate.string('sites[i].name', site.name);
		validate.string('sites[i].username', site.username);
		validate.string('sites[i].password', site.password);
	});
	const transmission = configuration.transmission;
	validate.object('transmission', transmission);
	validate.string('transmission.host', transmission.host, true);
	validate.number('transmission.port', transmission.port, true);
	validate.string('transmission.username', transmission.username);
	validate.string('transmission.password', transmission.password);
	validate.boolean('transmission.ssl', transmission.ssl, true);
	validate.string('transmission.url', transmission.url, true);
}

function setDefaultValues(configuration: Configuration) {
	configuration.logPath = configuration.logPath || 'warehouse.log';
	configuration.listenPort = configuration.listenPort || 3000;
	const localhost = 'localhost';
	configuration.listenHostname = configuration.listenHostname || localhost;
	configuration.externalHostname = configuration.externalHostname || localhost;
	configuration.subscriptionInterval = configuration.subscriptionInterval || 180;
	configuration.torrentSizeLimit = configuration.torrentSizeLimit || 10;
	const freeDiskSpace = configuration.freeDiskSpace;
	freeDiskSpace.interval = freeDiskSpace.interval || 60;
	freeDiskSpace.min = freeDiskSpace.min || 10;
	const transmission = configuration.transmission;
	transmission.host = transmission.host || localhost;
	transmission.port = transmission.port || 9091;
	transmission.ssl = transmission.ssl || false;
	transmission.url = transmission.url || '/transmission/rpc';
}